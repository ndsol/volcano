# Copyright 2014 The Chromium Authors. All rights reserved.
# Copyright (c) 2017-2018 the Volcano Authors. All rights reserved.
# Licensed under the GPLv3.

import("//src/gn/toolchain/android/settings.gni")
import("//src/gn/config/sanitizers/sanitizers.gni")
import("//src/gn/toolchain/sysroot.gni")

assert(is_android)

# clang uses abi_target, gcc uses _isyspath
if (current_cpu == "arm") {
  abi_target = "arm-linux-androideabi"
  _isyspath = "/sysroot/usr/include/arm-linux-androideabi"
} else if (current_cpu == "x86") {
  abi_target = "i686-linux-androideabi"
  _isyspath = "/sysroot/usr/include/i686-linux-android"
} else if (current_cpu == "arm64") {
  abi_target = "aarch64-linux-android"
  _isyspath = "/sysroot/usr/include/aarch64-linux-android"
} else if (current_cpu == "x64") {
  # Place holder for x64 support, not tested.
  # TODO: Enable clang support for Android x64. http://crbug.com/539781
  abi_target = "x86_64-linux-androideabi"
  _isyspath = "/sysroot/usr/include/x86_64-linux-android"
} else if (current_cpu == "mipsel") {
  abi_target = "mipsel-linux-android"
  _isyspath = "/sysroot/usr/include/mipsel-linux-android"
} else if (current_cpu == "mips64el") {
  # Place holder for mips64 support, not tested.
  abi_target = "mips64el-linux-androideabi"
  _isyspath = "/sysroot/usr/include/mips64el-linux-android"
} else {
  assert(false, "Architecture not supported")
}

# silence warning "_isyspath was unused before it went out of scope"
if (_isyspath == "") {}

# This is included by reference in the //src/gn/config/compiler config that
# is applied to all targets. It is here to separate out the logic that is
# Android-only.
config("compiler") {
  cflags = [
    "-ffunction-sections",
    "-fno-short-enums",
  ]
  defines = [
    "ANDROID",

    # The NDK has these things, but doesn't define the constants to say that it
    # does. Define them here instead.
    "HAVE_SYS_UIO_H",

    # Forces full rebuilds on NDK rolls.
    "ANDROID_NDK_VERSION=${android_ndk_version}",

    # C preprocessor can only work with numbers.
    "ANDROID_NDK_MAJOR=${android_ndk_major_version}",

    "__ANDROID_API__=${android_sdk_version}",
  ]

  if (is_clang) {
    rebased_android_toolchain_root =
        rebase_path(android_toolchain_root, root_build_dir)
    assert(rebased_android_toolchain_root != "")  # Mark as used.
    if (current_cpu == "mipsel" || current_cpu == "mips64el") {
      cflags += [
        # TODO(gordanac) Enable integrated-as.
        "-fno-integrated-as",
        "-B${rebased_android_toolchain_root}/bin",  # Else /usr/bin/as gets picked up.
      ]
    }
  } else {
    # Clang doesn't support these flags.
    cflags += [
      "-finline-limit=64",
    ]
  }

  ldflags = [
    "-Wl,--build-id=sha1",
    "-Wl,--no-undefined",
  ]
  if (current_cpu == "arm") {
    ldflags += [
      # Don't allow visible symbols from libgcc or libc++ to be
      # re-exported.
      "-Wl,--exclude-libs=libgcc.a",
      "-Wl,--exclude-libs=libc++_static.a",
    ]
  }

  if (is_clang) {
    if (android_ndk_major_version < 15) {
      _rebased_android_toolchain_root =
          rebase_path(android_toolchain_root, root_build_dir)

      # Let clang find the linker in the NDK.
      ldflags += [ "--gcc-toolchain=$_rebased_android_toolchain_root" ]
    }

    cflags += [ "--target=$abi_target" ]
    ldflags += [ "--target=$abi_target" ]
  }

  # Assign any flags set for the C compiler to asmflags so that they are sent
  # to the assembler.
  asmflags = cflags
}

# This is included by reference in the //src/gn/config:runtime_library
# config that is applied to all targets. It is here to separate out the logic
# that is Android-only. Please see that target for advice on what should go in
# :runtime_library vs. :compiler.
config("runtime_library") {
  # NOTE: The libc++ header include paths below are specified in cflags_cc
  # rather than include_dirs because they need to come after include_dirs.
  # Think of them like system headers, but don't use '-isystem' because the
  # arm-linux-androideabi-4.4.3 toolchain (circa Gingerbread) will exhibit
  # strange errors. The include ordering here is important; change with
  # caution.
  cflags_cc = []
  ldflags = [ "-nostdlib" ]
  lib_dirs = [ android_libcpp_lib_dir ]

  if (android_ndk_major_version < 13) {
    libcxx_include_path =
        rebase_path("$android_libcpp_root/libcxx/include", root_build_dir)
    libcxxabi_include_path = rebase_path(
            "$android_ndk_root/sources/cxx-stl/llvm-libc++abi/libcxxabi/include",
            root_build_dir)
  } else {
    libcxx_include_path =
        rebase_path("$android_libcpp_root/include", root_build_dir)
    libcxxabi_include_path =
        rebase_path("$android_ndk_root/sources/cxx-stl/llvm-libc++abi/include",
                    root_build_dir)
    if (!is_clang) {
      # Per the release notes, GCC is not supported in the NDK starting with
      # r13. It's still present, though, and has conflicting declarations of
      # float abs(float).
      cflags_cc += [ "-Wno-attributes" ]
    }

    if (android_ndk_major_version >= 16) {
      cflags = [ "-isystem" + rebase_path("$android_ndk_root$_isyspath",
                                          root_build_dir) ]
      if (!is_clang) {
        _glcpp = "$android_ndk_root/sources/cxx-stl/gnu-libstdc++/$android_toolchain_version"
        cflags_cc += [
          "-isystem" + rebase_path("$_glcpp/libs/$android_app_abi/include", root_build_dir)
        ]
        libcxxabi_include_path = rebase_path("$_glcpp/include", root_build_dir)
      }
    }
  }
  cflags_cc += [
    "-isystem" + libcxx_include_path,
    "-isystem" + libcxxabi_include_path,
    "-isystem" +
        rebase_path("$android_ndk_root/sources/android/support/include",
                    root_build_dir),
    "--sysroot=" + rebase_path(sysroot, root_build_dir),
  ]
  cflags_objcc = cflags_cc

  defines = [ "__GNU_SOURCE=1" ]  # Necessary for clone().

  # The libc++ runtime library (must come first).
  # ASan needs to dynamically link to libc++ even in static builds so
  # that it can interpose operator new.
  if (is_asan) {
    libs = [ "c++_shared" ]
  } else {
    libs = [ "c++_static" ]
  }
  libs += [
    "c",
    "c++abi",
  ]

  # arm builds of libc++ starting in NDK r12 depend on unwind.
  if (current_cpu == "arm") {
    libs += [ "unwind" ]
  }
  # NDK r16 and earlier need -landroid_support.
  # NDK r17 drops gcc support and moves the code directly into llvm -lc
  # https://github.com/android-ndk/ndk/issues/544
  if (android_ndk_major_version < 17) {
    libs += [ "android_support" ]
  }

  if (!is_clang) {
    # Manually link the libgcc.a that the cross compiler uses. This is
    # absolute because the linker will look inside the sysroot if it's not.
    libs += [ rebase_path(android_libgcc_file) ]

    # Clang with libc++ does not require an explicit atomic library reference.
    libs += [ "atomic" ]
    # silence warning "abi_target was unused before it went out of scope"
    if (abi_target == "") {}
  } else {
    libs += [ "gcc" ]

    # Work around incompatibilities between bionic and clang headers.
    defines += [
      "__compiler_offsetof=__builtin_offsetof",
      "nan=__builtin_nan",
    ]
  }

  # TODO(jdduke) Re-enable on mips after resolving linking
  # issues with libc++ (crbug.com/456380).
  if (current_cpu != "mipsel" && current_cpu != "mips64el") {
    ldflags += [ "-Wl,--warn-shared-textrel" ]
  }
}

config("executable_config") {
  cflags = [ "-fPIE" ]
  asmflags = [ "-fPIE" ]
  ldflags = [ "-pie" ]
}

# Instrumentation -------------------------------------------------------------
#
# The BUILDCONFIG file sets the "default_cygprofile_instrumentation" config on
# targets by default. You can override whether the cygprofile instrumentation is
# used on a per-target basis:
#
# configs -= [ "//src/gn/config/android:default_cygprofile_instrumentation" ]
# configs += [ "//src/gn/config/android:no_cygprofile_instrumentation" ]

config("default_cygprofile_instrumentation") {
  if (use_order_profiling) {
    configs = [ ":cygprofile_instrumentation" ]
  } else {
    configs = [ ":no_cygprofile_instrumentation" ]
  }
}

config("cygprofile_instrumentation") {
  defines = [ "CYGPROFILE_INSTRUMENTATION=1" ]
  cflags = [ "-finstrument-functions" ]

  if (!is_clang) {
    cflags += [
      # Allow mmx intrinsics to inline, so that the compiler can expand the intrinsics.
      "-finstrument-functions-exclude-file-list=mmintrin.h",

      # Avoid errors with current NDK:
      # "third_party/android_tools/ndk/toolchains/arm-linux-androideabi-4.6/prebuilt/linux-x86_64/bin/../lib/gcc/arm-linux-androideabi/4.6/include/arm_neon.h:3426:3: error: argument must be a constant"
      "-finstrument-functions-exclude-file-list=arm_neon.h",
    ]
  }
}

config("no_cygprofile_instrumentation") {
}
