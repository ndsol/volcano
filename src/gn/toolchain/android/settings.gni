# Copyright 2014 The Chromium Authors. All rights reserved.
# Copyright (c) 2017-2018 the Volcano Authors. All rights reserved.
# Licensed under the GPLv3.

# This file contains common system config stuff for the Android build.

declare_args() {
  android_sdk = "//"
  android_sdk_version = "24"
  android_sdk_build_tools_version = "24.0.2"
  android_latest_sdk = 0
  android_keystore_file = ""
  android_use_old_aapt = false
}
assert(current_os != "android" || android_sdk != "//",
       "android_sdk must be set")

declare_args() {
  # Declare android_ndk_major_version in declare_args so you can override it.
  # However, overriding it will cause compiler errors!
  android_ndk_major_version = 0
  android_ndk_version_prefix = "r"

  if (android_sdk != "//") {
    android_ndk_root = "$android_sdk/ndk-bundle"
  }

  # Libc++ library directory. Override to use a custom libc++ binary.
  android_libcpp_lib_dir = ""

  # Adds intrumentation to each function. Writes a file with the order that
  # functions are called at startup.
  use_order_profiling = false
}
declare_args() {
  if (android_ndk_major_version != 0) {
    android_ndk_version = android_ndk_version_prefix + android_ndk_major_version
  }
}

# Host stuff -----------------------------------------------------------------

# Defines the name the Android build gives to the current host CPU
# architecture, which is different than the names GN uses.
if (host_cpu == "x64") {
  android_host_arch = "x86_64"
} else if (host_cpu == "x86") {
  android_host_arch = "x86"
} else {
  assert(false, "Need Android toolchain support for your build CPU arch.")
}

# Defines the name the Android build gives to the current host CPU
# architecture, which is different than the names GN uses.
if (host_os == "linux") {
  android_host_os = "linux"
} else if (host_os == "mac") {
  android_host_os = "darwin"
} else if (host_os == "win") {
  android_host_os = "windows"
} else {
  assert(false, "Need Android toolchain support for your build OS.")
}

# Directories and files ------------------------------------------------------
#
# We define may of the dirs strings here for each output architecture (rather
# than just the current one) since these are needed by the Android toolchain
# file to define toolchains for all possible targets in one pass.

android_sdk_platform = "$android_sdk/platforms/android-${android_sdk_version}"

if (defined(android_ndk_root)) {
  if (android_ndk_major_version == 0) {
    android_ndk_major_version = exec_script("android_ndk_major_version.py",
                                            [ android_ndk_root ],
                                            "trim value")
    # Tip: to access this value, just import("//toolchain/android/settings.gni").
    android_ndk_version = android_ndk_version_prefix + android_ndk_major_version
  }

  # Path to the Android NDK and SDK.
  android_ndk_include_dir = "$android_ndk_root/usr/include"
  android_ndk_platform_arch = "$android_ndk_root/platforms/" +
      "android-$android_sdk_version/arch-"

  android_sdk_tools = "${android_sdk}/tools"
  android_sdk_build_tools =
      "${android_sdk}/build-tools/$android_sdk_build_tools_version"

  # Path to the SDK's android.jar
  android_sdk_jar = "$android_sdk_platform/android.jar"

  zipalign_path = "$android_sdk_build_tools/zipalign"

  # Subdirectories inside android_ndk_root that contain the sysroot for the
  # associated platform.
  if (android_ndk_major_version < 16) {
    # If you raise this, reevaluate the snprintf=snprintf in ./BUILD.gn.
    _android_api_level = 24
    # If you raise this, reevaluate the snprintf=snprintf in ./BUILD.gn.
    _android64_api_level = 24

    _sysroot_base = "platforms/android-${_android_api_level}"
    _sysroot64_base = "platforms/android-${_android64_api_level}"
    x86_android_sysroot_subdir = "$_sysroot_base/arch-x86"
    arm_android_sysroot_subdir = "$_sysroot_base/arch-arm"
    mips_android_sysroot_subdir = "$_sysroot_base/arch-mips"

    x86_64_android_sysroot_subdir = "$_sysroot64_base/arch-x86_64"
    arm64_android_sysroot_subdir = "$_sysroot64_base/arch-arm64"
    mips64_android_sysroot_subdir = "$_sysroot64_base/arch-mips64"
  } else {
    # NDK16 and newer have a single sysroot for all arch
    _sysroot_base = "sysroot"
    _sysroot64_base = "sysroot"

    x86_android_sysroot_subdir = "$_sysroot_base"
    arm_android_sysroot_subdir = "$_sysroot_base"
    mips_android_sysroot_subdir = "$_sysroot_base"

    x86_64_android_sysroot_subdir = "$_sysroot64_base"
    arm64_android_sysroot_subdir = "$_sysroot64_base"
    mips64_android_sysroot_subdir = "$_sysroot64_base"
  }

  # Toolchain root directory for each build. The actual binaries are inside
  # a "bin" directory inside of these. Define variables for both clang and gcc.

  android_clang_toolchain_root = android_ndk_root +
      "/toolchains/llvm/prebuilt/${android_host_os}-${android_host_arch}"

  android_toolchain_version = "4.9"
  android_toolchain_detailed_version = "4.9.x"
  _prebuilt = "-${android_toolchain_version}/prebuilt/"
  _prebuilt += "${android_host_os}-${android_host_arch}"
  x86_android_toolchain_root = "$android_ndk_root/toolchains/x86$_prebuilt"
  arm_android_toolchain_root = "$android_ndk_root/toolchains/arm-linux-androideabi$_prebuilt"
  mips_android_toolchain_root = "$android_ndk_root/toolchains/mipsel-linux-android$_prebuilt"
  x86_64_android_toolchain_root = "$android_ndk_root/toolchains/x86_64$_prebuilt"
  arm64_android_toolchain_root = "$android_ndk_root/toolchains/aarch64-linux-android$_prebuilt"
  mips64_android_toolchain_root = "$android_ndk_root/toolchains/mips64el-linux-android$_prebuilt"

  # Location of libgcc. This is only needed for the current GN toolchain, so we
  # only need to define the current one, rather than one for every platform
  # like the toolchain roots.
  if (current_cpu == "x86") {
    android_prebuilt_arch = "android-x86"
    _binary_prefix = "i686-linux-android-"
    android_toolchain_root = "$x86_android_toolchain_root"
    android_libgcc_file = "$android_toolchain_root/lib/gcc/i686-linux-android/${android_toolchain_detailed_version}/libgcc.a"
  } else if (current_cpu == "arm") {
    android_prebuilt_arch = "android-arm"
    _binary_prefix = "arm-linux-androideabi-"
    android_toolchain_root = "$arm_android_toolchain_root"
    android_libgcc_file = "$android_toolchain_root/lib/gcc/arm-linux-androideabi/${android_toolchain_detailed_version}/libgcc.a"
  } else if (current_cpu == "mipsel") {
    android_prebuilt_arch = "android-mips"
    _binary_prefix = "mipsel-linux-android-"
    android_toolchain_root = "$mips_android_toolchain_root"
    android_libgcc_file = "$android_toolchain_root/lib/gcc/mipsel-linux-android/${android_toolchain_detailed_version}/libgcc.a"
  } else if (current_cpu == "x64") {
    android_prebuilt_arch = "android-x86_64"
    _binary_prefix = "x86_64-linux-android-"
    android_toolchain_root = "$x86_64_android_toolchain_root"
    android_libgcc_file = "$android_toolchain_root/lib/gcc/x86_64-linux-android/${android_toolchain_detailed_version}/libgcc.a"
  } else if (current_cpu == "arm64") {
    android_prebuilt_arch = "android-arm64"
    _binary_prefix = "aarch64-linux-android-"
    android_toolchain_root = "$arm64_android_toolchain_root"
    android_libgcc_file = "$android_toolchain_root/lib/gcc/aarch64-linux-android/${android_toolchain_detailed_version}/libgcc.a"
  } else if (current_cpu == "mips64el") {
    android_prebuilt_arch = "android-mips64"
    _binary_prefix = "mips64el-linux-android-"
    android_toolchain_root = "$mips64_android_toolchain_root"
    android_libgcc_file = "$android_toolchain_root/lib/gcc/mips64el-linux-android/${android_toolchain_detailed_version}/libgcc.a"
  } else {
    assert(false, "Need android libgcc support for your target arch.")
  }

  android_tool_prefix = "$android_toolchain_root/bin/$_binary_prefix"

  # Toolchain stuff ------------------------------------------------------------

  android_libcpp_root = "$android_ndk_root/sources/cxx-stl/llvm-libc++"

  # ABI ------------------------------------------------------------------------

  if (current_cpu == "x86") {
    android_app_abi = "x86"
  } else if (current_cpu == "arm") {
    import("//src/gn/config/arm.gni")
    if (arm_version < 7) {
      android_app_abi = "armeabi"
    } else {
      android_app_abi = "armeabi-v7a"
    }
  } else if (current_cpu == "mipsel") {
    android_app_abi = "mips"
  } else if (current_cpu == "x64") {
    android_app_abi = "x86_64"
  } else if (current_cpu == "arm64") {
    android_app_abi = "arm64-v8a"
  } else if (current_cpu == "mips64el") {
    android_app_abi = "mips64"
  } else {
    assert(false, "Unknown Android ABI: $current_cpu")
  }

  if (android_libcpp_lib_dir == "") {
    android_libcpp_lib_dir = "${android_libcpp_root}/libs/${android_app_abi}"
  }

  # Secondary ABI -------------------------------------------------------------
  if (target_cpu == "arm64" || target_cpu == "x64" || target_cpu == "mips64el") {
    android_64bit_target_cpu = true
  } else if (target_cpu == "arm" || target_cpu == "x86" ||
            target_cpu == "mipsel") {
    android_64bit_target_cpu = false
  } else {
    assert(false, "Unknown target CPU: $target_cpu")
  }

  # Intentionally do not define android_app_secondary_abi_cpu and
  # android_app_secondary_abi for 32-bit target_cpu, since they are not used.
  if (target_cpu == "arm64") {
    android_secondary_abi_cpu = "arm"
    android_app_secondary_abi = "armeabi-v7a"
  } else if (target_cpu == "x64") {
    android_secondary_abi_cpu = "x86"
    android_app_secondary_abi = "x86"
  } else if (target_cpu == "mips64el") {
    android_secondary_abi_cpu = "mipsel"
    android_app_secondary_abi = "mips"
  }

  if (defined(android_secondary_abi_cpu)) {
    if (is_clang) {
      android_secondary_abi_toolchain =
          "//src/gn/toolchain/android:android_clang_${android_secondary_abi_cpu}"
    } else {
      android_secondary_abi_toolchain =
          "//src/gn/toolchain/android:android_${android_secondary_abi_cpu}"
    }
  }
}
