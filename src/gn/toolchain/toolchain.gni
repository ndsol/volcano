# Copyright 2015 The Chromium Authors. All rights reserved.
# Copyright (c) 2017-2018 the Volcano Authors. All rights reserved.
# Licensed under the GPLv3.

# Toolchain-related configuration that may be needed outside the context of the
# toolchain() rules themselves.

declare_args() {
  # How many symbols to include in the build. This affects the performance of
  # the build since the symbols are large and dealing with them is slow.
  #   2 means regular build with symbols.
  #   1 means minimal symbols, usually enough for backtraces only.
  #   0 means no symbols.
  symbol_level = 2
}

if (host_os == "mac") {
  os_specific_cross_host = current_toolchain == "//src/gn/toolchain/mac:host_clang_$host_cpu"
} else if (host_os != "win") {
  os_specific_cross_host = current_toolchain == "//src/gn/toolchain/posix:host_$host_cpu"
} else {
  # Cross compiles do not work on win.
  os_specific_cross_host = false
}

# See the same logic in BUILDCONFIG.gn (in this dir).
if (host_os == "mac") {
  os_specific_host_toolchain = "//src/gn/toolchain/mac:clang_$host_cpu"
} else if (host_os == "win") {
  if (is_clang) {
    os_specific_host_toolchain = "//src/gn/toolchain/win:clang_$target_cpu"
  } else {
    os_specific_host_toolchain = "//src/gn/toolchain/win:$target_cpu"
  }
} else {
  os_specific_host_toolchain = "//src/gn/toolchain/posix:$host_cpu"
}

declare_args() {
  is_cross_host = os_specific_cross_host

  # This should not normally be set as a build argument.  It's here for any
  # targets that would break when the is_cross_host toolchain duplicates the
  # "non cross host" build targets.
  host_toolchain_not_cross_host = os_specific_host_toolchain
}

# If it wasn't manually set, set to an appropriate default.
assert(symbol_level >= 0 && symbol_level <= 2, "Invalid symbol_level")

# Extension for shared library files (including leading dot).
if (is_mac) {
  shlib_extension = ".dylib"
} else if (is_posix) {
  shlib_extension = ".so"
} else if (is_win) {
  shlib_extension = ".dll"
} else {
  assert(false, "Platform not supported")
}

# Prefix for shared library files.
if (is_posix) {
  shlib_prefix = "lib"
} else {
  shlib_prefix = ""
}

# While other "tool"s in a toolchain are specific to the target of that
# toolchain, the "stamp" and "copy" tools are really generic to the host;
# but each toolchain must define them separately.  GN doesn't allow a
# template instantiation inside a toolchain definition, so some boilerplate
# has to be repeated in each toolchain to define these two tools.  These
# four variables reduce the duplication in that boilerplate.
stamp_description = "STAMP {{output}}"
copy_description = "COPY {{source}} {{output}}"
if (host_os == "win") {
  stamp_path = rebase_path("//src/gn/toolchain/win/stamp.py", root_build_dir)
  copy_path =
      rebase_path("//src/gn/toolchain/win/recursive_mirror.py", root_build_dir)

  stamp_command = "$python_path $stamp_path {{output}}"
  copy_command = "$python_path $copy_path {{source}} {{output}}"
} else {
  stamp_command = "touch {{output}}"
  copy_command = "ln -f {{source}} {{output}} 2>/dev/null || (rm -rf {{output}} && cp -af {{source}} {{output}})"
}
