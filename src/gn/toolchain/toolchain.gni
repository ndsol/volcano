# Copyright 2015 The Chromium Authors. All rights reserved.
# Copyright (c) 2017-2018 the Volcano Authors. All rights reserved.
# Licensed under the GPLv3.

# Toolchain-related configuration that may be needed outside the context of the
# toolchain() rules themselves.

declare_args() {
  # How many symbols to include in the build. This affects the performance of
  # the build since the symbols are large and dealing with them is slow.
  #   2 means regular build with symbols.
  #   1 means minimal symbols, usually enough for backtraces only.
  #   0 means no symbols.
  symbol_level = 2
}

# If it wasn't manually set, set to an appropriate default.
assert(symbol_level >= 0 && symbol_level <= 2, "Invalid symbol_level")

# Extension for shared library files (including leading dot).
if (is_mac) {
  shlib_extension = ".dylib"
} else if (is_posix) {
  shlib_extension = ".so"
} else if (is_win) {
  shlib_extension = ".dll"
} else {
  assert(false, "Platform not supported")
}

# Prefix for shared library files.
if (is_posix) {
  shlib_prefix = "lib"
} else {
  shlib_prefix = ""
}

# While other "tool"s in a toolchain are specific to the target of that
# toolchain, the "stamp" and "copy" tools are really generic to the host;
# but each toolchain must define them separately.  GN doesn't allow a
# template instantiation inside a toolchain definition, so some boilerplate
# has to be repeated in each toolchain to define these two tools.  These
# four variables reduce the duplication in that boilerplate.
stamp_description = "STAMP {{output}}"
copy_description = "COPY {{source}} {{output}}"
if (host_os == "win") {
  stamp_path = rebase_path("//src/gn/toolchain/win/stamp.py", root_build_dir)
  copy_path =
      rebase_path("//src/gn/toolchain/win/recursive_mirror.py", root_build_dir)

  stamp_command = "$python_path $stamp_path {{output}}"
  copy_command = "$python_path $copy_path {{source}} {{output}}"
} else {
  stamp_command = "touch {{output}}"
  copy_command = "ln -f {{source}} {{output}} 2>/dev/null || (rm -rf {{output}} && cp -af {{source}} {{output}})"
}

# add_to_app defines a config with no effect on the actual linked output.
# But the config is spotted at link-time and used after linking to create the
# app bundle. This is used *only* to tell the post-link bundling step to
# scan and include files in the target_gen_dir. Because it is a config, it can
# be added multiple times in the same library (configs are deduplicated). It
# must be defined in one place, so your BUILD.gn file must have a line:
#   'add_to_app("add_to_app") {}'
#
# gcc_solink_wrapper.py extracts the config and writes add_to_app.txt.
#
# Intended uses:
# * Android permissions requests (if your app depends on a library, the library
#   can request certain permissions like network access or storage)
# * Android resources (if your app depends on a library, the library can bundle
#   files that will be available at runtime in the app bundle)
# * macOS resources (if your app depends on a library, the library can bundle
#   files that will be available at runtime in the app bundle)
template("add_to_app") {
  assert(target_name == "add_to_app",
         "must be add_to_app(\"add_to_app\") {}, not \"$target_name\"")
  config(target_name) {
    if (defined(invoker)) {
      # suppress "You set the variable "invoker" here and it was unused"
      invoker = "foo"
      invoker = []
    }
    if (is_win) {
      # do nothing
    } else if (host_os == "win" && current_os == "android") {
      assert(false, "Android builds may work, but this is not tested.")
    } else {
      ldflags = [
        "-DVOLCANO_ADD_TO_APP=\"" + rebase_path(target_gen_dir, root_build_dir) +
        "\""
      ]
    }
  }
}

# resource uses add_to_app and bundles files that will be available at runtime.
# * linux, win32: bundled files are next to the executable in a 'res' dir.
# * macOS command line: same as linux, win32
# * android: use AAssetManager_open()
#
# To add whole subdirectories, gn has a limitation that may blow up with:
# "The file:" $foo "is listed as an input or source for the targets" $bar
# "but no targets in the build generate that file."
# In that case, define fileparts = [ "dir/file1", "dir/file2" ]
# so gn can still track each individual file, but you are not stuck with
# the {{source_file_part}} template below which has no subdirs.
#
# Your BUILD.gn file must have a line add_to_app("add_to_app") {}.
template("resource") {
  if (current_os == host_os) {
    copy(target_name) {
      # install files in "res" dir next to the executable.
      # Use findInPaths() in core/structs.h to locate the file.
      forward_variables_from(invoker, "*")
      if (defined(fileparts)) {
        outputs = []
        foreach(part, fileparts) {
          outputs += [ "$root_build_dir/res/$part" ]
        }
      } else {
        outputs = [ "$root_build_dir/res/{{source_file_part}}" ]
      }
    }

    # Avoid host_toolchain = "//src/gn/toolchain/posix:host_x64" in a
    # cross-compile. Go directly to "//src/gn/toolchain/posix:x64".
    if (get_label_info(target_name, "toolchain") != host_toolchain) {
      # Android is different. add_to_app() will trigger files to be added to
      # the final APK bundle.
      copy("droid-copy-$target_name") {
        forward_variables_from(invoker, "*")
        if (defined(fileparts)) {
          outputs = []
          foreach(part, fileparts) {
            outputs += [ "$target_gen_dir/assets/$part" ]
          }
        } else {
          outputs = [ "$target_gen_dir/assets/{{source_file_part}}" ]
        }
      }
    }
  } else {
    # This per-variant target_name lets the app build against one
    # $host_toolchain target (the droid-copy-$target_name above).
    # Since the $host_toolchain may be clang or may not be
    # and the $is_clang variable only reveals what the target is on,
    # the string replacement is done twice, once for clang and once for gcc.
    # Of course, if $from does not match, string replacement is a no op.
    from = ":host_clang_$host_cpu"
    to = ":clang_$host_cpu"
    correct_if_clang = exec_script("//src/gn/toolchain/rep.py",
        [ "-", "/proc/self/fd/1", from, to, host_toolchain ],
        "trim string")
    # Now do the string replacement as if the host is gcc.
    from = ":host_$host_cpu"
    to = ":$host_cpu"
    correct_tc = exec_script("//src/gn/toolchain/rep.py",
        [ "-", "/proc/self/fd/1", from, to, correct_if_clang ],
        "trim string")
    group(target_name) {
      not_needed(invoker, [ "sources" ])
      deps = [ ":droid-copy-" + target_name + "($correct_tc)" ]
      all_dependent_configs = [ ":add_to_app" ]
      if (defined(invoker.deps)) {
        foreach(d, invoker.deps) {
          e = get_label_info(d, "label_no_toolchain") + "($correct_tc)"
          deps += [ e ]
        }
      }
      if (defined(invoker.fileparts)) {
        fileparts = invoker.fileparts
        fileparts = []
      }
    }
  }
}

# permission uses add_to_app and bundles permissions requests into the app
# bundle.
#
# Your BUILD.gn file must have a line add_to_app("add_to_app") {}.
template("permission") {
  group(target_name) {
    all_dependent_configs = [ ":add_to_app" ]
    assert(defined(invoker.android) || defined(invoker.mac),
           "Must declare one of: [ android | mac ]")
    not_needed(invoker, [ "android" ])
    if (is_android && defined(invoker.android)) {
      write_file("$target_gen_dir/add-to-android-manifest.txt",
                 invoker.android)
    }
    if (defined(invoker.mac)) {
      assert(false, "FIXME: mac permission is a no op.")
    }
  }
}
