# Copyright 2017-2018 the Volcano Authors. All rights reserved.
# Licensed under the GPL v3.

#    "$assimp_root/code/Common/simd.cpp",

declare_args() {
  use_assimp_open3dgc = true # If "ld: cannot find -lrt", change to false.
  assimp_root = rebase_path("//vendor/assimp", ".",
                            rebase_path(target_out_dir, root_build_dir))
}

# postprocessing.gni will import formats.gni.
import("postprocessing.gni")

template("assimp_source_set") {
  source_set(target_name) {
    forward_variables_from(invoker, "*")
    configs += [
      ":assimp_config",
      ":assimp_local_config",
    ]
    if (defined(configs_add)) {
      configs += configs_add
    }
    if (defined(configs_del)) {
      configs -= configs_del
    }
    configs -= [ "//src/gn/config:no_exceptions" ]
    configs += [ "//src/gn/config:exceptions" ]
    if (!defined(deps)) {
      deps = []
    }
    deps += [
      ":config.h",
      ":revision.h",
    ]
  }
}

template("assimp_target") {
  target(invoker.assimp_target_type, target_name) {
    forward_variables_from(invoker, "*")
    configs += [
      ":assimp_config",
      ":assimp_local_config",
    ]
    if (defined(configs_add)) {
      configs += configs_add
    }
    configs -= [ "//src/gn/config:no_exceptions" ]
    configs += [ "//src/gn/config:exceptions" ]
    if (!defined(deps)) {
      deps = []
    }
    deps += [
      ":config.h",
      ":revision.h",
    ]
  }
}

template("assimpConfigure") {
  action(target_name) {
    forward_variables_from(invoker, "*")
    script = "//src/gn/vendor/assimpConfigure.py"
    args = []
    foreach(file, inputs) {
      args += [ "-i", rebase_path(file) ]
    }
    foreach(file, outputs) {
      args += [ "-o", rebase_path(file) ]
    }
    if (defined(extra_args)) {
      args += extra_args
    }
  }
}

assimpConfigure("config.h") {
  inputs = [ "$assimp_root/include/assimp/config.h.in" ]
  outputs = [ "$target_gen_dir/assimp/config.h" ]
}

assimpConfigure("revision.h") {
  inputs = [ "$assimp_root/revision.h.in" ]
  outputs = [ "$target_gen_dir/revision.h" ]
  extra_args = [
    "-d", "GIT_COMMIT_HASH=0",
    "-d", "GIT_BRANCH=HEAD",
    "-d", "ASSIMP_VERSION_MAJOR=5",
    "-d", "ASSIMP_VERSION_MINOR=0",
    "-d", "ASSIMP_VERSION_PATCH=1",
    "-d", "ASSIMP_PACKAGE_VERSION=0",
    "-d", "LIBRARY_SUFFIX=",
    "-d", "CMAKE_DEBUG_POSTFIX=",
  ]
}

config("assimp_config") {
  include_dirs = [
    "$assimp_root/include",
    "$assimp_root/contrib/irrXML",
    "$target_gen_dir",
  ]
  defines = assimp_defines + [ "ASSIMP_BUILD_NO_OWN_ZLIB" ]
  if (use_assimp_open3dgc) {
    defines += [ "ASSIMP_IMPORTER_GLTF_USE_OPEN3DGC=1" ]
  }
  if (use_assimp_opengex) {
    defines += [
      "OPENDDLPARSER_BUILD",
      "OPENDDL_NO_USE_CPP11",
    ]
  }

  if (!use_assimp_exporter) {
    defines += [ "ASSIMP_BUILD_NO_EXPORT" ]
  }
  if (is_posix) {
    # This is only needed for 32-bit posix, but has no effect if used on 64-bit.
    defines += [ "_FILE_OFFSET_BITS=64" ]
  }
}

config("assimp_local_config") {
  include_dirs = [ "$assimp_root/code" ]
  defines = []
  if (is_win) {
    # Win does not ship zlib in a well-known place, so use skia.
    include_dirs += [
      "$assimp_root/../volcano/vendor/skia/third_party/externals/zlib",
    ]
    if (is_debug) {
      cflags = [
        "/Zi",
        "/Od",
      ]
    }
  } else {
    cflags = [
      # gcc GenericProperty.h:114:8: warning 'inline const bool' const ignored.
      "-Wno-ignored-qualifiers",
      # Defined for all of assimp
      "-fvisibility=hidden",
    ]
  }
}

config("assimp_include_unzip") {
  include_dirs = [ "$assimp_root/contrib/unzip" ]
}

#
# Helper and utility libraries.
#

assimp_source_set("IrrXML") {
  sources = [ "$assimp_root/contrib/irrXML/irrXML.cpp" ]
  configs_del = [ "//src/gn/config:strict-overflow" ]
}

config("openddl_config") {
  include_dirs = [ "$assimp_root/contrib/openddlparser/include" ]
}

source_set("openddl_suppress_more_warnings") {
  sources = [
    "$assimp_root/contrib/openddlparser/code/DDLNode.cpp",
    "$assimp_root/contrib/openddlparser/code/Value.cpp",
  ]
  configs += [
    "config:no_unused_parameter",
    ":openddl_config",
  ]
}

source_set("openddl") {
  sources = [
    "$assimp_root/contrib/openddlparser/code/OpenDDLParser.cpp",
    "$assimp_root/contrib/openddlparser/code/OpenDDLCommon.cpp",
    "$assimp_root/contrib/openddlparser/code/OpenDDLExport.cpp",
    "$assimp_root/contrib/openddlparser/code/OpenDDLStream.cpp",
  ]
  public_configs = [
    ":assimp_config",
    ":assimp_local_config",
    ":openddl_config",
  ]
  deps = [ ":openddl_suppress_more_warnings" ]
}

config("open3dgc_config") {
  include_dirs = [ "$assimp_root/contrib" ]
}

source_set("open3dgc") {
  sources = [
    "$assimp_root/contrib/Open3DGC/o3dgcArithmeticCodec.cpp",
    "$assimp_root/contrib/Open3DGC/o3dgcDynamicVectorDecoder.cpp",
    "$assimp_root/contrib/Open3DGC/o3dgcDynamicVectorEncoder.cpp",
    "$assimp_root/contrib/Open3DGC/o3dgcTools.cpp",
    "$assimp_root/contrib/Open3DGC/o3dgcTriangleFans.cpp",
  ]
  public_configs = [
    ":assimp_config",
    ":assimp_local_config",
    ":open3dgc_config",
  ]
  configs -= [ "//src/gn/config:strict-overflow" ]
}

source_set("poly2tri") {
  sources = [
    "$assimp_root/contrib/poly2tri/poly2tri/common/shapes.cc",
    "$assimp_root/contrib/poly2tri/poly2tri/sweep/advancing_front.cc",
    "$assimp_root/contrib/poly2tri/poly2tri/sweep/cdt.cc",
    "$assimp_root/contrib/poly2tri/poly2tri/sweep/sweep.cc",
    "$assimp_root/contrib/poly2tri/poly2tri/sweep/sweep_context.cc",
  ]
  configs -= [ "//src/gn/config:no_exceptions" ]
  configs += [ "//src/gn/config:exceptions" ]
}

config("unzip_config") {
  include_dirs = [ "$assimp_root/contrib/unzip" ]
  if (!is_win) {
    cflags = [ "-Wno-unused-parameter" ]
  }
}

source_set("unzip") {
  sources = [
    "$assimp_root/contrib/unzip/ioapi.c",
    "$assimp_root/contrib/unzip/unzip.c",
  ]
  configs += [
    ":assimp_local_config",  # because unzip.c includes zlib.h
    "config:no_unused_variable",
    "config:no_incompatible_pointer_types",
  ]
  public_configs = [
    ":unzip_config",
    ":assimp_config",
    "config:no_parentheses",
  ]
  deps = [
    "../skia/zlib",
  ]
}

assimp_source_set("clipper") {
  sources = [ "$assimp_root/contrib/clipper/clipper.cpp" ]
  configs_add = [ "config:no_deprecated_copy" ]
  configs_del = [ "//src/gn/config:strict-overflow" ]
}

assimp_source_set("assimp_target_animation") {
  sources = [ "$assimp_root/code/Common/TargetAnimation.cpp" ]
}

assimp_source_set("assimp_remove_comments") {
  sources = [ "$assimp_root/code/Common/RemoveComments.cpp" ]
}

assimp_source_set("assimp_standard_shapes") {
  sources = [ "$assimp_root/code/Common/StandardShapes.cpp" ]
}

assimp_source_set("assimp_vertex_triangle_adjacency") {
  sources = [ "$assimp_root/code/Common/VertexTriangleAdjacency.cpp" ]
}

assimp_source_set("assimp_subdivision") {
  sources = [ "$assimp_root/code/Common/Subdivision.cpp" ]
  deps = [ ":assimp_vertex_triangle_adjacency" ]
}

assimp_source_set("assimp_validate_data_structure") {
  sources = [ "$assimp_root/code/PostProcessing/ValidateDataStructure.cpp" ]
}

assimp_source_set("assimp_skeleton_mesh_builder") {
  sources = [ "$assimp_root/code/Common/SkeletonMeshBuilder.cpp" ]
}

assimp_source_set("assimp_create_anim_mesh") {
  sources = [ "$assimp_root/code/Common/CreateAnimMesh.cpp" ]
}
























#
# Importers
#

assimp_source_set("importer_amf") {
  sources = [
    "$assimp_root/code/AssetLib/AMF/AMFImporter.cpp",
    "$assimp_root/code/AssetLib/AMF/AMFImporter_Geometry.cpp",
    "$assimp_root/code/AssetLib/AMF/AMFImporter_Material.cpp",
    "$assimp_root/code/AssetLib/AMF/AMFImporter_Postprocess.cpp",
  ]
  configs_add = [ "config:no_unused_parameter" ]
  deps = [
    ":assimp_standard_shapes",
    ":IrrXML",
  ]
}

assimp_source_set("importer_3ds") {
  sources = [
    "$assimp_root/code/AssetLib/3DS/3DSConverter.cpp",
    "$assimp_root/code/AssetLib/3DS/3DSLoader.cpp",
    "$assimp_root/code/AssetLib/3DS/3DSExporter.cpp",
  ]
  configs_add = [
    "config:no_unused_parameter",
    "config:no_implicit_fallthrough",
  ]
  deps = [ ":assimp_target_animation" ]
}

assimp_source_set("importer_m3d") {
  sources = [
    "$assimp_root/code/AssetLib/M3D/M3DImporter.cpp",
    "$assimp_root/code/AssetLib/M3D/M3DWrapper.cpp",
    "$assimp_root/code/AssetLib/M3D/M3DExporter.cpp",
  ]
  configs_add = [
    "config:no_unused_parameter",
    "config:no_strict_aliasing",
  ]
  configs_del = [ "//src/gn/config:strict-overflow" ]
  deps = [ ":assimp_target_animation" ]
}

assimp_source_set("importer_ac") {
  sources = [ "$assimp_root/code/AssetLib/AC/ACLoader.cpp" ]
  deps = [ ":assimp_subdivision" ]
}

assimp_source_set("importer_ase") {
  sources = [
    "$assimp_root/code/AssetLib/ASE/ASELoader.cpp",
    "$assimp_root/code/AssetLib/ASE/ASEParser.cpp",
  ]
  deps = [
    ":assimp_target_animation",
    ":assimp_skeleton_mesh_builder",
  ]
}

assimp_source_set("importer_assbin") {
  sources = [
    "$assimp_root/code/AssetLib/Assbin/AssbinExporter.cpp",
    "$assimp_root/code/AssetLib/Assbin/AssbinLoader.cpp",
  ]
  configs_add = [
    "config:no_unused_parameter",
    "config:no_strict_aliasing",
  ]
}

assimp_source_set("importer_assxml") {
  sources = [ "$assimp_root/code/AssetLib/Assxml/AssxmlExporter.cpp" ]
  configs_add = [ "config:no_unused_parameter" ]
}

assimp_source_set("importer_b3d") {
  sources = [ "$assimp_root/code/AssetLib/B3D/B3DImporter.cpp" ]
  deps = [ ":assimp_postprocessing" ]
}

assimp_source_set("importer_bvh") {
  sources = [ "$assimp_root/code/AssetLib/BVH/BVHLoader.cpp" ]
  deps = [ ":assimp_skeleton_mesh_builder" ]
}

assimp_source_set("importer_collada") {
  sources = [
    "$assimp_root/code/AssetLib/Collada/ColladaHelper.cpp",
    "$assimp_root/code/AssetLib/Collada/ColladaLoader.cpp",
    "$assimp_root/code/AssetLib/Collada/ColladaParser.cpp",
    "$assimp_root/code/AssetLib/Collada/ColladaExporter.cpp",
  ]
  configs_add = [
    "config:no_unused_parameter",
    "config:no_maybe_uninitialized",
  ]
  deps = [
    ":IrrXML",
    ":assimp_skeleton_mesh_builder",
    ":assimp_create_anim_mesh",
  ]
}

assimp_source_set("importer_dxf") {
  sources = [ "$assimp_root/code/AssetLib/DXF/DXFLoader.cpp" ]
}

assimp_source_set("importer_csm") {
  sources = [ "$assimp_root/code/AssetLib/CSM/CSMLoader.cpp" ]
  deps = [ ":assimp_skeleton_mesh_builder" ]
}

assimp_source_set("importer_hmp") {
  sources = [ "$assimp_root/code/AssetLib/HMP/HMPLoader.cpp" ]
  deps = [
    ":importer_mdl",
    ":importer_md2",
  ]
}

assimp_source_set("importer_irr") {
  sources = [
    "$assimp_root/code/AssetLib/Irr/IRRLoader.cpp",
    "$assimp_root/code/AssetLib/Irr/IRRMeshLoader.cpp",
    "$assimp_root/code/AssetLib/Irr/IRRShared.cpp",
  ]
  configs_del = [ "//src/gn/config:strict-overflow" ]
  deps = [
    ":assimp_standard_shapes",
    ":IrrXML",
  ]
}

assimp_source_set("importer_lwo") {
  sources = [
    "$assimp_root/code/AssetLib/LWO/LWOAnimation.cpp",
    "$assimp_root/code/AssetLib/LWO/LWOBLoader.cpp",
    "$assimp_root/code/AssetLib/LWO/LWOLoader.cpp",
    "$assimp_root/code/AssetLib/LWO/LWOMaterial.cpp",
  ]
}

assimp_source_set("importer_lws") {
  sources = [ "$assimp_root/code/AssetLib/LWS/LWSLoader.cpp" ]
  deps = [
    ":assimp_skeleton_mesh_builder",
    ":importer_lwo",
  ]
}

assimp_source_set("importer_md2") {
  sources = [ "$assimp_root/code/AssetLib/MD2/MD2Loader.cpp" ]
}

assimp_source_set("importer_md3") {
  sources = [ "$assimp_root/code/AssetLib/MD3/MD3Loader.cpp" ]
  deps = [ ":assimp_remove_comments" ]
}

assimp_source_set("importer_md5") {
  sources = [
    "$assimp_root/code/AssetLib/MD5/MD5Loader.cpp",
    "$assimp_root/code/AssetLib/MD5/MD5Parser.cpp",
  ]
  deps = [
    ":assimp_remove_comments",
    ":assimp_skeleton_mesh_builder",
  ]
}

assimp_source_set("importer_mdc") {
  sources = [ "$assimp_root/code/AssetLib/MDC/MDCLoader.cpp" ]
}

assimp_source_set("importer_mdl") {
  sources = [
    "$assimp_root/code/AssetLib/MDL/MDLLoader.cpp",
    "$assimp_root/code/AssetLib/MDL/MDLMaterialLoader.cpp",
    "$assimp_root/code/AssetLib/MDL/HalfLife/HL1MDLLoader.cpp",
    "$assimp_root/code/AssetLib/MDL/HalfLife/UniqueNameGenerator.cpp",
  ]
}

assimp_source_set("importer_nff") {
  sources = [ "$assimp_root/code/AssetLib/NFF/NFFLoader.cpp" ]
  configs_del = [ "//src/gn/config:strict-overflow" ]
  deps = [
    ":assimp_remove_comments",
    ":assimp_standard_shapes",
  ]
}

assimp_source_set("importer_ndo") {
  sources = [ "$assimp_root/code/AssetLib/NDO/NDOLoader.cpp" ]
}

assimp_source_set("importer_off") {
  sources = [ "$assimp_root/code/AssetLib/OFF/OFFLoader.cpp" ]
  configs_del = [ "//src/gn/config:strict-overflow" ]
}

assimp_source_set("importer_obj") {
  sources = [
    "$assimp_root/code/AssetLib/Obj/ObjFileImporter.cpp",
    "$assimp_root/code/AssetLib/Obj/ObjFileMtlImporter.cpp",
    "$assimp_root/code/AssetLib/Obj/ObjFileParser.cpp",
    "$assimp_root/code/AssetLib/Obj/ObjExporter.cpp",
  ]
  configs_add = [ "config:no_unused_parameter" ]
}

assimp_source_set("importer_ogre") {
  sources = [
    "$assimp_root/code/AssetLib/Ogre/OgreImporter.cpp",
    "$assimp_root/code/AssetLib/Ogre/OgreStructs.cpp",
    "$assimp_root/code/AssetLib/Ogre/OgreBinarySerializer.cpp",
    "$assimp_root/code/AssetLib/Ogre/OgreXmlSerializer.cpp",
    "$assimp_root/code/AssetLib/Ogre/OgreMaterial.cpp",
  ]
  deps = [ ":IrrXML" ]
}

assimp_source_set("importer_opengex") {
  sources = [
    "$assimp_root/code/AssetLib/OpenGEX/OpenGEXExporter.cpp",
    "$assimp_root/code/AssetLib/OpenGEX/OpenGEXImporter.cpp",
  ]
  configs_add = [ "config:no_unused_parameter" ]
  deps = [
    ":assimp_make_verbose_format",
    ":openddl",
  ]
}

assimp_source_set("importer_ply") {
  sources = [
    "$assimp_root/code/AssetLib/Ply/PlyLoader.cpp",
    "$assimp_root/code/AssetLib/Ply/PlyParser.cpp",
    "$assimp_root/code/AssetLib/Ply/PlyExporter.cpp",
  ]
  configs_add = [
    "config:no_unused_parameter",
    "config:no_parentheses",
  ]
}

assimp_source_set("importer_ms3d") {
  sources = [ "$assimp_root/code/AssetLib/MS3D/MS3DLoader.cpp" ]
}

assimp_source_set("importer_cob") {
  sources = [ "$assimp_root/code/AssetLib/COB/COBLoader.cpp" ]
  deps = [ ":assimp_postprocessing" ] # depends on FlipWindindOrderProcess
}

assimp_source_set("importer_blend") {
  sources = [
    "$assimp_root/code/AssetLib/Blender/BlenderLoader.cpp",
    "$assimp_root/code/AssetLib/Blender/BlenderDNA.cpp",
    "$assimp_root/code/AssetLib/Blender/BlenderScene.cpp",
    "$assimp_root/code/AssetLib/Blender/BlenderModifier.cpp",
    "$assimp_root/code/AssetLib/Blender/BlenderBMesh.cpp",
    "$assimp_root/code/AssetLib/Blender/BlenderTessellator.cpp",
    "$assimp_root/code/AssetLib/Blender/BlenderCustomData.cpp",
  ]
  configs_add = [ "config:no_strict_aliasing" ]
  deps = [
    ":assimp_subdivision",
    ":poly2tri",
  ]
}

assimp_source_set("importer_ifc") {
  sources = [
    "$assimp_root/code/AssetLib/IFC/IFCLoader.cpp",
    "$assimp_root/code/AssetLib/IFC/IFCReaderGen1_2x3.cpp",
    "$assimp_root/code/AssetLib/IFC/IFCReaderGen2_2x3.cpp",
    "$assimp_root/code/AssetLib/IFC/IFCUtil.cpp",
    "$assimp_root/code/AssetLib/IFC/IFCGeometry.cpp",
    "$assimp_root/code/AssetLib/IFC/IFCMaterial.cpp",
    "$assimp_root/code/AssetLib/IFC/IFCProfile.cpp",
    "$assimp_root/code/AssetLib/IFC/IFCCurve.cpp",
    "$assimp_root/code/AssetLib/IFC/IFCBoolean.cpp",
    "$assimp_root/code/AssetLib/IFC/IFCOpenings.cpp",
  ]
  deps = [
    ":clipper",
    ":unzip",
    ":importer_blend", # For p2t.
  ]
}

assimp_source_set("importer_xgl") {
  sources = [ "$assimp_root/code/AssetLib/XGL/XGLLoader.cpp" ]
  deps = [ ":IrrXML" ]
}

assimp_source_set("importer_fbx_suppress_more_warnings") {
  sources = [
    "$assimp_root/code/AssetLib/FBX/FBXParser.cpp",
    "$assimp_root/code/AssetLib/FBX/FBXBinaryTokenizer.cpp",
  ]
  configs_add = [
    "config:no_unused_parameter",
    "config:no_unused_function",
    "config:no_maybe_uninitialized",
  ]
}

assimp_source_set("importer_fbx") {
  sources = [
    "$assimp_root/code/AssetLib/FBX/FBXImporter.cpp",
    "$assimp_root/code/AssetLib/FBX/FBXTokenizer.cpp",
    "$assimp_root/code/AssetLib/FBX/FBXConverter.cpp",
    "$assimp_root/code/AssetLib/FBX/FBXUtil.cpp",
    "$assimp_root/code/AssetLib/FBX/FBXDocument.cpp",
    "$assimp_root/code/AssetLib/FBX/FBXProperties.cpp",
    "$assimp_root/code/AssetLib/FBX/FBXMeshGeometry.cpp",
    "$assimp_root/code/AssetLib/FBX/FBXMaterial.cpp",
    "$assimp_root/code/AssetLib/FBX/FBXModel.cpp",
    "$assimp_root/code/AssetLib/FBX/FBXAnimation.cpp",
    "$assimp_root/code/AssetLib/FBX/FBXNodeAttribute.cpp",
    "$assimp_root/code/AssetLib/FBX/FBXDeformer.cpp",
    "$assimp_root/code/AssetLib/FBX/FBXDocumentUtil.cpp",
  ]
  configs_add = [ "config:no_maybe_uninitialized" ]
  deps = [
    ":importer_fbx_suppress_more_warnings",
    ":assimp_create_anim_mesh",
  ]
}

assimp_source_set("importer_q3d") {
  sources = [ "$assimp_root/code/AssetLib/Q3D/Q3DLoader.cpp" ]
}

assimp_source_set("importer_q3bsp") {
  sources = [
    "$assimp_root/code/AssetLib/Q3BSP/Q3BSPFileParser.cpp",
    "$assimp_root/code/AssetLib/Q3BSP/Q3BSPFileImporter.cpp",
  ]
  deps = [ ":unzip" ]
}

assimp_source_set("importer_raw") {
  sources = [ "$assimp_root/code/AssetLib/Raw/RawLoader.cpp" ]
  configs_del = [ "//src/gn/config:strict-overflow" ]
}

assimp_source_set("importer_sib") {
  sources = [ "$assimp_root/code/AssetLib/SIB/SIBImporter.cpp" ]
  configs_add = [ "config:no_unused_parameter" ]
}

assimp_source_set("importer_smd") {
  sources = [ "$assimp_root/code/AssetLib/SMD/SMDLoader.cpp" ]
  deps = [ ":assimp_skeleton_mesh_builder" ]
}

assimp_source_set("importer_stl") {
  sources = [
    "$assimp_root/code/AssetLib/STL/STLLoader.cpp",
    "$assimp_root/code/AssetLib/STL/STLExporter.cpp",
  ]
  configs_add = [
    "config:no_unused_parameter",
    "config:no_type_limits",
    "config:no_class_memaccess",
  ]
}

assimp_source_set("importer_terragen") {
  sources = [ "$assimp_root/code/AssetLib/Terragen/TerragenLoader.cpp" ]
}

assimp_source_set("importer_3d") {
  sources = [ "$assimp_root/code/AssetLib/Unreal/UnrealLoader.cpp" ]
  deps = [ ":assimp_postprocessing" ] # depends on MakeLeftHandedProcess
}

assimp_source_set("importer_x") {
  sources = [
    "$assimp_root/code/AssetLib/X/XFileImporter.cpp",
    "$assimp_root/code/AssetLib/X/XFileParser.cpp",
    "$assimp_root/code/AssetLib/X/XFileExporter.cpp",
  ]
  deps = [ ":assimp_postprocessing" ] # depends on MakeLeftHandedProcess
}

assimp_source_set("importer_x3d") {
  sources = [
    "$assimp_root/code/AssetLib/X3D/X3DExporter.cpp",
    "$assimp_root/code/AssetLib/X3D/X3DImporter.cpp",
    "$assimp_root/code/AssetLib/X3D/X3DImporter_Geometry2D.cpp",
    "$assimp_root/code/AssetLib/X3D/X3DImporter_Geometry3D.cpp",
    "$assimp_root/code/AssetLib/X3D/X3DImporter_Group.cpp",
    "$assimp_root/code/AssetLib/X3D/X3DImporter_Light.cpp",
    "$assimp_root/code/AssetLib/X3D/X3DImporter_Metadata.cpp",
    "$assimp_root/code/AssetLib/X3D/X3DImporter_Networking.cpp",
    "$assimp_root/code/AssetLib/X3D/X3DImporter_Postprocess.cpp",
    "$assimp_root/code/AssetLib/X3D/X3DImporter_Rendering.cpp",
    "$assimp_root/code/AssetLib/X3D/X3DImporter_Shape.cpp",
    "$assimp_root/code/AssetLib/X3D/X3DImporter_Texturing.cpp",
    "$assimp_root/code/AssetLib/X3D/FIReader.cpp",
    "$assimp_root/code/AssetLib/X3D/X3DVocabulary.cpp",
  ]
  configs_add = [
    "config:no_unused_parameter",
    "config:no_strict_aliasing",
    "config:no_maybe_uninitialized"
  ]
  configs_del = [ "//src/gn/config:strict-overflow" ]
  deps = [
    ":assimp_standard_shapes",
    ":IrrXML",
  ]
}

config("rapidjson") {
  include_dirs = [ "$assimp_root/contrib/rapidjson/include" ]
}

assimp_source_set("importer_gltf") {
  sources = [
    "$assimp_root/code/AssetLib/glTF/glTFCommon.cpp",
    "$assimp_root/code/AssetLib/glTF/glTFImporter.cpp",
    "$assimp_root/code/AssetLib/glTF/glTFExporter.cpp",
    "$assimp_root/code/AssetLib/glTF2/glTF2Importer.cpp",
    "$assimp_root/code/AssetLib/glTF2/glTF2Exporter.cpp",
  ]
  configs_add = [
    ":rapidjson",
    "config:no_unused_parameter",
    "config:no_maybe_uninitialized",
    "config:no_unused_but_set_variable",
    "config:no_class_memaccess",
  ]
  configs_del = [ "//src/gn/config:strict-overflow" ]
  deps = [
    ":assimp_make_verbose_format",
    ":assimp_create_anim_mesh",
  ]
  if (use_assimp_open3dgc) {
    deps += [ ":open3dgc" ]
    if (!is_android) { # Android has these symbols in libc.
      libs = [ "rt" ]
    }
  }
}

assimp_source_set("importer_3mf") {
  sources = [
    "$assimp_root/code/AssetLib/3MF/D3MFImporter.cpp",
    "$assimp_root/code/AssetLib/3MF/D3MFOpcPackage.cpp",
  ]
  deps = [
    ":unzip",
    ":IrrXML",
  ]
}

assimp_source_set("importer_mmd") {
  sources = [
    "$assimp_root/code/AssetLib/MMD/MMDImporter.cpp",
    "$assimp_root/code/AssetLib/MMD/MMDPmxParser.cpp",
  ]
  configs_add = [ "config:no_unused_parameter" ]
  deps = [ ":assimp_postprocessing" ] # depends on MakeLeftHandedProcess
}

assimp_source_set("step_file_reader") {
  sources = [
    "$assimp_root/code/AssetLib/STEPParser/STEPFileReader.cpp",
    "$assimp_root/code/AssetLib/STEPParser/STEPFileEncoding.cpp",
  ]
}

# C4D is non-free, and only supports MSVC.
assimp_source_set("importer_c4d") {
  sources = [ "$assimp_root/code/AssetLib/C4D/C4DImporter.cpp" ]
  include_dirs = [ "$assimp_root/contrib/Melange/includes" ]
  libs = [ "WSock32.lib", "Winmm.lib" ]
}

assimp_source_set("assimp_importer") {
  deps = []
  if (assimp_formats != "") {
    deps += [ ":assimp_validate_data_structure" ]
  }

  if (is_win && use_c4d_nonfree_importer) {
    # C4D is non-free, and only supports MSVC.
    deps += [ ":importer_c4d" ]
  }
  if (use_assimp_blend) {
    # BlenderDNA.h: Compiler complains that Convert() is used but never defined
    # Blender::Structure::Convert(T&, FileDatabase&) [T = Blender::Scene],
    # because Scene code is in a separate file (put it in the right .cpp file
    # and the warning goes away).
    deps += [ ":importer_ifc" ] # Pulls in :importer_blend too.
  }
  if (use_assimp_hmp_and_mdl) {
    # MDLFileData.h is broken: aiVector3D in struct Header should be
    # typedef float MDLVector3[3]; instead. Compiler will complain!
    deps += [ ":importer_hmp" ] # Pulls in :importer_mdl and :importer_md2.
  }
  if (use_assimp_amf) {
    deps += [ ":importer_amf" ]
  }
  if (use_assimp_3ds) {
    deps += [ ":importer_3ds" ]
  }
  if (use_assimp_m3d) {
    deps += [ ":importer_m3d" ]
  }
  if (use_assimp_ac) {
    deps += [ ":importer_ac" ]
  }
  if (use_assimp_ase) {
    deps += [ ":importer_ase" ]
  }
  if (use_assimp_assbin) {
    deps += [ ":importer_assbin" ]
  }
  if (use_assimp_assxml) {
    deps += [ ":importer_assxml" ]
  }
  if (use_assimp_b3d) {
    deps += [ ":importer_b3d" ]
  }
  if (use_assimp_bvh) {
    deps += [ ":importer_bvh" ]
  }
  if (use_assimp_collada) {
    deps += [ ":importer_collada" ]
  }
  if (use_assimp_dxf) {
    deps += [ ":importer_dxf" ]
  }
  if (use_assimp_dxf) {
    deps += [ ":importer_dxf" ]
  }
  if (use_assimp_csm) {
    deps += [ ":importer_csm" ]
  }
  if (use_assimp_irr) {
    deps += [ ":importer_irr" ]
  }
  if (use_assimp_lwo_and_lws) {
    deps += [ ":importer_lws" ]
  }
  if (use_assimp_md2) {
    deps += [ ":importer_md2" ]
  }
  if (use_assimp_md3) {
    deps += [ ":importer_md3" ]
  }
  if (use_assimp_md5) {
    deps += [ ":importer_md5" ]
  }
  if (use_assimp_mdc) {
    deps += [ ":importer_mdc" ]
  }
  if (use_assimp_nff) {
    deps += [ ":importer_nff" ]
  }
  if (use_assimp_ndo) {
    deps += [ ":importer_ndo" ]
  }
  if (use_assimp_obj) {
    deps += [ ":importer_obj" ]
  }
  if (use_assimp_off) {
    deps += [ ":importer_off" ]
  }
  if (use_assimp_ogre) {
    deps += [ ":importer_ogre" ]
  }
  if (use_assimp_opengex) {
    deps += [
      ":importer_opengex",
      ":openddl",
    ]
  }
  if (use_assimp_ply) {
    deps += [ ":importer_ply" ]
  }
  if (use_assimp_ms3d) {
    deps += [ ":importer_ms3d" ]
  }
  if (use_assimp_cob) {
    deps += [ ":importer_cob" ]
  }
  if (use_assimp_xgl) {
    deps += [ ":importer_xgl" ]
  }
  if (use_assimp_fbx) {
    deps += [ ":importer_fbx" ]
  }
  if (use_assimp_q3d) {
    deps += [ ":importer_q3d" ]
  }
  if (use_assimp_q3bsp) {
    deps += [ ":importer_q3bsp" ]
  }
  if (use_assimp_raw) {
    deps += [ ":importer_raw" ]
  }
  if (use_assimp_sib) {
    deps += [ ":importer_sib" ]
  }
  if (use_assimp_smd) {
    deps += [ ":importer_smd" ]
  }
  if (use_assimp_stl) {
    deps += [ ":importer_stl" ]
  }
  if (use_assimp_terragen) {
    deps += [ ":importer_terragen" ]
  }
  if (use_assimp_3d) {
    deps += [ ":importer_3d" ]
  }
  if (use_assimp_importer_x) {
    deps += [ ":importer_x" ]
  }
  if (use_assimp_x3d) {
    deps += [ ":importer_x3d" ]
  }
  if (use_assimp_gltf) {
    deps += [ ":importer_gltf" ]
  }
  if (use_assimp_3mf) {
    deps += [ ":importer_3mf" ]
  }
  if (use_assimp_mmd) {
    deps += [ ":importer_mmd" ]
  }
  if (use_assimp_step) {
    deps += [ ":importer_step" ]
  }
}

























#
# Postprocessing
#

assimp_source_set("assimp_join_vertices_process") {
  sources = [ "$assimp_root/code/PostProcessing/JoinVerticesProcess.cpp" ]
  deps = [ ":assimp_skeleton_mesh_builder" ]
}

assimp_source_set("assimp_improve_cache_locality_process") {
  sources = [ "$assimp_root/code/PostProcessing/ImproveCacheLocality.cpp" ]
  deps = [ ":assimp_vertex_triangle_adjacency" ]
}

assimp_source_set("assimp_postprocessing") {
  sources = []
  if (use_assimp_process_makelefthanded ||
      use_assimp_process_flipuvs ||
      use_assimp_process_flipwindingorder) {
    sources += [ "$assimp_root/code/PostProcessing/ConvertToLHProcess.cpp" ]
  }
  if (use_assimp_process_removevc) {
    sources += [ "$assimp_root/code/PostProcessing/RemoveVCProcess.cpp" ]
  }
  if (use_assimp_process_remove_redundantmaterials) {
    sources += [ "$assimp_root/code/PostProcessing/RemoveRedundantMaterials.cpp" ]
  }
  if (use_assimp_process_embedtextures) {
    sources += [ "$assimp_root/code/PostProcessing/EmbedTexturesProcess.cpp" ]
  }
  if (use_assimp_process_findinstances) {
    sources += [ "$assimp_root/code/PostProcessing/FindInstancesProcess.cpp" ]
  }
  if (use_assimp_process_optimizegraph) {
    sources += [ "$assimp_root/code/PostProcessing/OptimizeGraph.cpp" ]
  }
  if (use_assimp_process_finddegenerates) {
    sources += [ "$assimp_root/code/PostProcessing/FindDegenerates.cpp" ]
  }
  if (use_assimp_process_genuvcoords) {
    sources += [ "$assimp_root/code/PostProcessing/ComputeUVMappingProcess.cpp" ]
  }
  if (use_assimp_process_transformtexcoords) {
    sources += [ "$assimp_root/code/PostProcessing/TextureTransform.cpp" ]
  }
  if (use_assimp_process_globalscale) {
    sources += [ "$assimp_root/code/PostProcessing/ScaleProcess.cpp" ]
  }
  if (use_assimp_process_armaturepopulate) {
    sources += [ "$assimp_root/code/PostProcessing/ArmaturePopulate.cpp" ]
  }
  if (use_assimp_process_dropfacenormals) {
    sources += [ "$assimp_root/code/PostProcessing/DropFaceNormalsProcess.cpp" ]
  }
  if (use_assimp_process_pretransformvertices) {
    sources += [ "$assimp_root/code/PostProcessing/PretransformVertices.cpp" ]
  }
  if (use_assimp_process_triangulate) {
    sources += [ "$assimp_root/code/PostProcessing/TriangulateProcess.cpp" ]
  }
  if (use_assimp_process_sortbyptype) {
    sources += [ "$assimp_root/code/PostProcessing/SortByPTypeProcess.cpp" ]
  }
  if (use_assimp_process_findinvaliddata) {
    sources += [ "$assimp_root/code/PostProcessing/FindInvalidDataProcess.cpp" ]
  }
  if (use_assimp_process_optimizemeshes) {
    sources += [ "$assimp_root/code/PostProcessing/OptimizeMeshes.cpp" ]
  }
  if (use_assimp_process_fixinfacingnormals) {
    sources += [ "$assimp_root/code/PostProcessing/FixNormalsStep.cpp" ]
  }
  if (use_assimp_process_splitbybonecount) {
    sources += [ "$assimp_root/code/PostProcessing/SplitByBoneCountProcess.cpp" ]
  }
  if (use_assimp_process_splitlargemeshes) {
    sources += [ "$assimp_root/code/PostProcessing/SplitLargeMeshes.cpp" ]
  }
  if (use_assimp_process_genfacenormals) {
    sources += [ "$assimp_root/code/PostProcessing/GenFaceNormalsProcess.cpp" ]
  }
  if (use_assimp_process_genvertexnormals) {
    sources += [ "$assimp_root/code/PostProcessing/GenVertexNormalsProcess.cpp" ]
  }
  if (use_assimp_process_calctangents) {
    sources += [ "$assimp_root/code/PostProcessing/CalcTangentsProcess.cpp" ]
  }
  if (use_assimp_process_debone) {
    sources += [ "$assimp_root/code/PostProcessing/DeboneProcess.cpp" ]
  }
  if (use_assimp_process_limitboneweights) {
    sources += [ "$assimp_root/code/PostProcessing/LimitBoneWeightsProcess.cpp" ]
  }
  if (use_assimp_process_genboundingboxes) {
    sources += [ "$assimp_root/code/PostProcessing/GenBoundingBoxesProcess.cpp" ]
  }
  deps = []
  if (use_assimp_process_joinvertices) {
    deps += [ ":assimp_join_vertices_process" ]
  }
  if (use_assimp_process_improvecachelocality) {
    deps += [ ":assimp_improve_cache_locality_process" ]
  }
}

assimp_source_set("assimp_make_verbose_format") {
  sources = [ "$assimp_root/code/PostProcessing/MakeVerboseFormat.cpp" ]
}

#
# Exporter
#

assimp_source_set("assimp_exporter") {
  sources = [
    "$assimp_root/code/Common/Exporter.cpp",
    "$assimp_root/code/CApi/AssimpCExport.cpp",
    "$assimp_root/code/AssetLib/Step/StepExporter.cpp",
  ]
  configs_add = [ "config:no_unused_parameter" ]
  deps = [
    ":assimp_make_verbose_format",
    ":assimp_postprocessing",
  ]
}

#
# Core
#

assimp_source_set("assimp_core_zip_archive_io_system") {
  sources = [
    "$assimp_root/code/Common/ZipArchiveIOSystem.cpp",
  ]
  configs_add = [
    ":assimp_include_unzip",
    "config:no_unused_parameter",
    "config:no_unused_variable",
  ]
  deps = [
    ":unzip",
    "../skia/zlib",
  ]
}

assimp_source_set("assimp_core_with_warnings_suppressed") {
  sources = [
    "$assimp_root/code/Common/SpatialSort.cpp",
    "$assimp_root/code/Common/DefaultLogger.cpp",
    "$assimp_root/code/Common/Importer.cpp",
    "$assimp_root/code/Common/BaseImporter.cpp",
  ]
  configs_add = [
    "config:no_unused_parameter",
    "config:no_misleading_indentation",
    "config:no_tautological_compare",
  ]
  configs_del = [ "//src/gn/config:strict-overflow" ]
}

assimp_target("assimp") {
  assimp_target_type = "static_library"
  sources = [
    "$assimp_root/code/Common/Assimp.cpp",
    "$assimp_root/code/Common/BaseProcess.cpp",
    "$assimp_root/code/Common/PostStepRegistry.cpp",
    "$assimp_root/code/Common/ImporterRegistry.cpp",
    "$assimp_root/code/Common/DefaultIOStream.cpp",
    "$assimp_root/code/Common/DefaultIOSystem.cpp",
    "$assimp_root/code/Common/SGSpatialSort.cpp",
    "$assimp_root/code/Common/SceneCombiner.cpp",
    "$assimp_root/code/Common/ScenePreprocessor.cpp",
    "$assimp_root/code/Common/scene.cpp",
    "$assimp_root/code/Common/Bitmap.cpp",
    "$assimp_root/code/Common/Version.cpp",
    "$assimp_root/code/Common/material.cpp",

    "$assimp_root/code/PostProcessing/ProcessHelper.cpp",

    "$assimp_root/code/Material/MaterialSystem.cpp",

    "$assimp_root/code/CApi/CInterfaceIOWrapper.cpp",
  ]
  public_configs = [ ":assimp_config" ]
  configs_add = [ "config:no_class_memaccess" ]
  deps = [
    ":assimp_core_with_warnings_suppressed",
    ":assimp_core_zip_archive_io_system",
    ":assimp_importer",
  ]

  if (is_win) {
    libs = [ "Advapi32.lib" ]
  }
  if (use_assimp_processing) {
    deps += [ ":assimp_postprocessing" ]
  }
  if (use_assimp_exporter) {
    deps += [ ":assimp_exporter" ]
  }
}
