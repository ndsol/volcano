# Copyright 2016 The Chromium Authors. All rights reserved.
# Copyright 2017-2018 the Volcano Authors. All rights reserved.
# Licensed under the GPL v3.
import("//src/gn/vendor/subgnDefines.gni")
if (is_win) {
  import("//src/gn/toolchain/win/settings.gni")
}

declare_args() {
  is_spirv_remap_enabled = true
  use_hlsl = true
  use_spirv_opt = true
  glslang = rebase_path(volcano_prefix + "vendor/glslang", ".",
                        rebase_path(target_out_dir, root_build_dir)) + "/"
}

config("glslangVulkan_gen_config") {
  if (is_clang) {
    cflags = [ "-Wno-newline-eof" ]
  }
  include_dirs = [ root_gen_dir ]
}

config("glslang_config") {
  include_dirs = [ glslang ]
  defines = []
  if (use_hlsl) {
    defines += [ "ENABLE_HLSL" ]
  }
  if (use_spirv_opt) {
    defines += [ "ENABLE_OPT" ]
  }
  if (is_linux || is_android || is_mac) {
    defines += [ "GLSLANG_OSINCLUDE_UNIX" ]
  } else if (is_win) {
    defines += [ "GLSLANG_OSINCLUDE_WIN32" ]
    include_dirs += [ glslang + "/OGLCompilersDll" ]
  } else {
    assert(false, "Unsupported platform.")
  }
}

if (!is_win) {
  import("//src/gn/toolchain/compiler_version.gni")
} else {
  gcc_version = 0
  if (gcc_version > 10) {
    # Silence error: Assignment had no effect
  }
}

config("glslang_local_config") {
  if (!is_win) {
    cflags = [
      "-Wno-unused-parameter",
      "-Wno-missing-field-initializers",
    ]
    if (gcc_version >= 40900) {
      cflags += [ "-Wno-implicit-fallthrough" ]
    }

    if (is_clang) {
      cflags += [
        "-Wno-extra-semi",
        "-Wno-tautological-constant-out-of-range-compare",
        "-Wno-reorder",
      ]
    }
  } else { # is_win
    defines = [ "_HAS_EXCEPTIONS=0" ] # disable exceptions in STL
    if (!use_dynamic_crt) {
      defines += [ "_STATIC_CPPLIB" ] # also needed to disable exceptions
    }
  }
}

config("glslang_maybe_uninitialized") {
  if (!is_win && !is_mac) {
    cflags = [ "-Wno-maybe-uninitialized" ]
  }
}

source_set("OGLCompiler") {
  sources = [ glslang + "OGLCompilersDLL/InitializeDll.cpp" ]
  all_dependent_configs = [ ":glslang_config" ]
  configs += [ ":glslang_local_config" ]
  configs -= [ "//src/gn/config:strict-overflow" ]
}

source_set("HLSL") {
  sources = [
    glslang + "hlsl/hlslAttributes.cpp",
    glslang + "hlsl/hlslParseHelper.cpp",
    glslang + "hlsl/hlslScanContext.cpp",
    glslang + "hlsl/hlslOpMap.cpp",
    glslang + "hlsl/hlslTokenStream.cpp",
    glslang + "hlsl/hlslGrammar.cpp",
    glslang + "hlsl/hlslParseables.cpp",
  ]

  all_dependent_configs = [ ":glslang_config" ]
  configs += [ ":glslang_local_config" ]
  configs -= [ "//src/gn/config:strict-overflow" ]
}

static_library("glslang-default-resource-limits") {
  sources = [
    glslang + "StandAlone/ResourceLimits.cpp",
  ]

  all_dependent_configs = [ ":glslang_config" ]
  configs += [ ":glslang_local_config" ]
}

source_set("glslang-just-to-silence-a-warning") {
  sources = [ glslang + "glslang/MachineIndependent/intermOut.cpp" ]
  if (!is_win) {
    cflags = [
      # Include the //src/gn/configs:wextra flags
      "-Wall",
      "-Wextra",
      "-Wformat=2",
      "-Wno-deprecated",
      # But disable strict-aliasing checks:
      "-fno-strict-aliasing",
      "-Wno-strict-aliasing",
      "-Wno-format-nonliteral",
    ]
  }
  configs += [
    ":glslang_config",
    ":glslang_local_config",
  ]
  configs -= [
    "//src/gn/config:wextra",
    "//src/gn/config:strict-overflow",
  ]
}

static_library("glslang") {
  sources = [
    glslang + "glslang/MachineIndependent/glslang_tab.cpp",
    glslang + "glslang/MachineIndependent/attribute.cpp",
    glslang + "glslang/MachineIndependent/Constant.cpp",
    glslang + "glslang/MachineIndependent/iomapper.cpp",
    glslang + "glslang/MachineIndependent/InfoSink.cpp",
    glslang + "glslang/MachineIndependent/Initialize.cpp",
    glslang + "glslang/MachineIndependent/IntermTraverse.cpp",
    glslang + "glslang/MachineIndependent/Intermediate.cpp",
    glslang + "glslang/MachineIndependent/ParseContextBase.cpp",
    glslang + "glslang/MachineIndependent/ParseHelper.cpp",
    glslang + "glslang/MachineIndependent/PoolAlloc.cpp",
    glslang + "glslang/MachineIndependent/RemoveTree.cpp",
    glslang + "glslang/MachineIndependent/Scan.cpp",
    glslang + "glslang/MachineIndependent/ShaderLang.cpp",
    glslang + "glslang/MachineIndependent/SymbolTable.cpp",
    glslang + "glslang/MachineIndependent/Versions.cpp",
    glslang + "glslang/MachineIndependent/limits.cpp",
    glslang + "glslang/MachineIndependent/linkValidate.cpp",
    glslang + "glslang/MachineIndependent/parseConst.cpp",
    glslang + "glslang/MachineIndependent/reflection.cpp",
    glslang + "glslang/MachineIndependent/preprocessor/Pp.cpp",
    glslang + "glslang/MachineIndependent/preprocessor/PpAtom.cpp",
    glslang + "glslang/MachineIndependent/preprocessor/PpContext.cpp",
    glslang + "glslang/MachineIndependent/preprocessor/PpScanner.cpp",
    glslang + "glslang/MachineIndependent/preprocessor/PpTokens.cpp",
    glslang + "glslang/MachineIndependent/propagateNoContraction.cpp",
    glslang + "glslang/GenericCodeGen/CodeGen.cpp",
    glslang + "glslang/GenericCodeGen/Link.cpp",
  ]

  if (is_linux || is_android || is_mac) {
    sources += [ glslang + "glslang/OSDependent/Unix/ossource.cpp" ]
  } else if (is_win) {
    sources += [
      glslang + "glslang/OSDependent/Windows/ossource.cpp",
    ]
  } else {
    assert(false, "Unsupported platform.")
  }

  all_dependent_configs = [ ":glslang_config" ]
  configs += [ ":glslang_local_config" ]
  configs -= [ "//src/gn/config:strict-overflow" ]
  deps = [
    ":glslang-just-to-silence-a-warning",
    ":OGLCompiler",
  ]
  if (use_hlsl) {
    deps += [ ":HLSL" ]
  }
}

source_set("SPIRV-just-to-silence-a-warning") {
  # This one file needs extra cflags to suppress warnings in it.
  # Ideally the code could be cleaned up. Suppress warnings because
  # the volcano project cannot go and fix every little thing.
  sources = [ glslang + "SPIRV/GlslangToSpv.cpp" ]
  if (!is_win && !is_mac) {
    cflags = [ "-Wno-maybe-uninitialized" ]
  }
  configs += [
    ":glslang_config",
    ":glslang_local_config",
  ]
  configs -= [ "//src/gn/config:strict-overflow" ]
}

static_library("SPIRV") {
  public = [ "SPIRV/spirv.hpp" ]
  sources = [
    glslang + "SPIRV/InReadableOrder.cpp",
    glslang + "SPIRV/Logger.cpp",
    glslang + "SPIRV/SpvBuilder.cpp",
    glslang + "SPIRV/SpvPostProcess.cpp",
    glslang + "SPIRV/doc.cpp",
    glslang + "SPIRV/SpvTools.cpp",
    glslang + "SPIRV/disassemble.cpp",
  ]

  all_dependent_configs = [ ":glslang_config" ]
  configs += [
    ":glslang_local_config",
    "../vulkan:include_spirv_tools_from_skia",
  ]
  configs -= [ "//src/gn/config:strict-overflow" ]
  deps = [
    ":SPIRV-just-to-silence-a-warning",
    ":glslang",
    "../vulkan:spirv-tools",
  ]
}

executable("glslangValidator") {
  sources = [ glslang + "StandAlone/StandAlone.cpp" ]

  deps = [
    ":glslang",
    ":SPIRV",
    ":OGLCompiler",
    ":glslang-default-resource-limits",
  ]
  if (use_hlsl) {
    deps += [ ":HLSL" ]
  }

  configs += [
    ":glslang_local_config",
    ":glslang_maybe_uninitialized",
    ":glslang_config",
  ]
  configs -= [ "//src/gn/config:strict-overflow" ]
}

if (is_spirv_remap_enabled) {
  source_set("SPIRVRemap") {
    sources = [
      glslang + "SPIRV/SPVRemapper.cpp",
    ]

    all_dependent_configs = [ ":glslang_config" ]
    configs += [ ":glslang_local_config" ]
    configs -= [ "//src/gn/config:strict-overflow" ]
    deps = [ ":glslang" ]
  }

  executable("spirv-remap") {
    sources = [ glslang + "StandAlone/spirv-remap.cpp" ]

    deps = [
      ":glslang",
      ":SPIRV",
      ":glslang-default-resource-limits",
    ]

    configs += [
      ":glslang_local_config",
      ":glslang_config",
    ]
  }
}
